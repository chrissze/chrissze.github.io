[ -z "$PS1" ] && return

echo "$HOME/.bashrc    starts."

curl -4 ifconfig.me && echo
curl -6 ifconfig.me && echo

# USER ALIAS

    alias 7p='7z a -mhe=on -p -t7z' #archive.7z input_file_dir

    alias als='echo && docker ps -a && echo && docker network ls && echo && docker volume ls && echo && sudo ls -laph /var/lib/docker/volumes && echo && echo /var/lib/docker/volumes && echo'

    alias cdwww='cd /opt/composes/nginx/wwwvol/'

    alias cdpy='cd /opt/github/examples/python'

    alias cdpys='cd /opt/github/examples/python/scripting'
    
    alias clonebatterypy='git clone git@github.com:chrissze/batterypy.git'

    alias clonebrew='git clone git@github.com:chrissze/brew.git'

    alias clonechris='git clone git@github.com:chrissze/chrissze.github.io.git'

    alias clonedimsumpy='git clone git@github.com:chrissze/dimsumpy.git'

    alias cloneexamples='git clone git@github.com:chrissze/examples.git'

    alias clonefullpizza='git clone git@github.com:chrissze/pizzapy.git && git clone git@github.com:chrissze/batterypy.git && git clone git@github.com:chrissze/dimsumpy.git'

    alias clonepizzapy='git clone git@github.com:chrissze/pizzapy.git'


    alias clonescript='git clone git@github.com:chrissze/script.git'

    alias cp='cp -i'  # prompt at overwrites
    
    alias down='docker compose down && echo && docker ps -a && echo && docker network ls && echo && docker volume ls && echo && sudo ls -laph /var/lib/docker/volumes && echo && echo /var/lib/docker/volumes && echo'

    alias gpush='git add . && git commit -m "minor update" && git push'
    
    alias gpull="git stash && git fetch --all && git reset --hard origin master"
    
    alias hi=history

    alias ins='docker inspect'

    # run at github/ folder
    alias link39='ln -s batterypy venv/lib/python3.9/site-packages/batterypy && ln -s dimsumpy venv/lib/python3.9/site-packages/dimsumpy'

    alias link311='ln -s batterypy venv/lib/python3.11/site-packages/batterypy && ln -s dimsumpy venv/lib/python3.11/site-packages/dimsumpy'

    alias mv='mv -i'  # prompt at overwrites
    
    alias nls='docker network ls'
    
    alias pmg='python3 manage.py makemigrations && python3 manage.py migrate'
    
    alias prun='python3 manage.py runserver'


    alias pip3un="pip3 freeze | grep -vE '^(certifi|cffi|cryptography|pip|pycparser|setuptools|wheel)==' | awk -F '==' '{print $1}' | xargs pip3 uninstall -y "

    alias pipun="pip freeze | grep -vE '^(certifi|cffi|cryptography|pip|pycparser|setuptools|wheel)==' | awk -F '==' '{print $1}' | xargs pip uninstall -y "


    alias pipup='pip3 install --upgrade pip'
    
    alias pipr='source ../venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt && pip list'
    
    alias psa='docker ps -a'
    
    alias pvenv='python3 -m venv venv && source venv/bin/activate && pip3 install --upgrade pip && which python3 && python3 -V &&  pip3 -V &&  pip3 list'

    alias py=python3


    alias re="rsync -avP -e 'ssh -p 55555'"

    alias rm='rm -i'

    #username=xx
    #password=hs
    alias samo2='sudo mount -t cifs -o credentials=/etc/samba/cred //o2.host.ac/o2 /media/o2'
    
    alias sha=sha256sum
    
    alias sou='source ~/.bash_profile'
    
    alias sys='systemctl status --no-pager'
    
    alias sysen='sudo systemctl enable --now'
    
    alias sulo='sudo bash -c "cd $(pwd); exec bash --login"'
    
    alias tip='cardano-cli query tip --mainnet'
    
    alias tnode='tmux attach -t node'
    
    alias tweb='tmux attach -t web'

    alias upd='docker compose up -d && echo && docker ps -a && echo && docker network ls && echo && docker volume ls && echo && sudo ls -laph /var/lib/docker/volumes && echo && echo /var/lib/docker/volumes && echo'

    alias venv='source venv/bin/activate'
    
    alias vls='docker volume ls'
    
    

# USER ENV

    PS1="\u@\h:\w \\$ "
    
    export EDITOR='nano'
    
    export VISUAL='nano'
    
    export HISTSIZE=500
    
    export HISTFILESIZE=500
    
    export NIXPKGS_ALLOW_UNFREE=1

    export PGDATA=/var/lib/pgsql/data


# USER FUNCTIONS

    cd() { builtin cd -P "$@" && ls -laph && echo && pwd && echo; }


    cpt() { cp "$1" /tmp/tmp.py ; }

    clip() { cat "$@" | xsel -b; }

    exec() { docker container exec -it "$@" /bin/bash; }


    ffm() {
        if [[ $# -eq 1 ]] && [[ -e "$1" ]]; then
            base_name="${1%.*}";
            extension="${1##*.}";
            aac_file="${base_name}.aac";
            mp4_file="${base_name}.mp4";

            if [[ "$extension" == "mp4" || "$extension" == "MP4" ]]; then
                input_file="${base_name}.mov";
                mv "$1" "$input_file";
            else
                input_file="$1";
            fi

            ffmpeg -i "$input_file" -acodec aac "$aac_file";
            ffmpeg -i "$input_file" -vcodec h264 -acodec aac "$mp4_file";
            ls -laph;
            echo;
            echo "  rsync -avP $USER@$HOSTNAME:$(realpath "$aac_file") .  &&  rsync -avP $USER@$HOSTNAME:$(realpath "$mp4_file") .  && ls -laph";
            echo;
        else
            echo "Usage: $0 <filename>";
        fi
    }


    fromt() { cp /tmp/tmp.py "$1"; }
    
    hit() { touch "$@" && chmod 755 "$@" && ls -la; }

    la() {
        if [ -z "$1" ]; then
            ls -ahlp
        else
            shopt -s dotglob nocaseglob; ls -adhlp "$1"* ."$1"* 2>/dev/null; shopt -u dotglob nocaseglob;
        fi
    }

    sss() {
        echo "  rsync -avP $1 cs@$HOSTNAME:$(realpath $1)" ; echo;
        echo "  rsync -avP cs@$HOSTNAME:$(realpath $1) ." ; echo;
        echo "  ssh $HOSTNAME \"cat $(realpath $1)\" | pbcopy"; echo;
        echo "  code --remote ssh-remote+$HOSTNAME $(pwd)"; echo;
    }


    startpro() {
        if [ ! -d "venv" ]; then
            python3 -m venv venv
        fi
        source venv/bin/activate;
        pip install --upgrade pip;

        mkdir "$1_project";
        cd "$1_project";
        touch requirements.txt;
        echo -e "Django\ngunicorn\nuvicorn" > requirements.txt;
        pip install -r requirements.txt;
        django-admin startproject "$1" .;

        mkdir extra_files;
        mkdir static_root;
        mkdir templates;

        # For Linux sed
        sed -i.original "s/ALLOWED_HOSTS = \[\]/ALLOWED_HOSTS = [ '*' ]/" "$1/settings.py";
        sed -i "s/'DIRS': \[\]/'DIRS': [ BASE_DIR \/ 'templates' ]/" "$1/settings.py";
        echo -e "\nSTATIC_ROOT = BASE_DIR / 'static_root'" | tee -a "$1/settings.py";
        echo -e "\nSTATICFILES_DIRS = [ BASE_DIR / 'extra_files' ]" | tee -a "$1/settings.py";

        cd ..;
        echo -e "UPDATED settings.py: \n";
        echo -e "  ALLOWED_HOSTS = [ '*' ]";
        echo -e "  TEMPLATES: \n    'DIRS': [ BASE_DIR / 'templates' ]";
        echo -e "  STATIC_ROOT = BASE_DIR / 'static_root' ";
        echo -e "  STATICFILES_DIRS = [ BASE_DIR / 'extra_files' ]";
    }


# USER PATH
    
    if [ -f /etc/paths ]; then
        eval PATH=$(grep -v '^\s*$\|^\s*#' /etc/paths | paste -sd ":" -)
        export PATH
    fi


echo "$HOME/.bashrc    ends."
