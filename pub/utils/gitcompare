#!/usr/bin/env python3

r"""

"""

import sys
import hashlib
from pathlib import Path


ignores: list[str] = [ 'build/', '.build/', 'debug/', '.dist/', '.git/', '__pycache__/', '/target', 'venv/'  ]


def get_relative_paths(root) -> set[str]:
    """ 
    DEPENDS: ignores
    Returns a set of all relative paths inside a given directory. 
    """
    paths = set()
    for path in Path(root).rglob('*'):
        rel_path = path.relative_to(root)
        if path.is_dir():
            rel_path = str(rel_path) + '/'  # Append trailing slash for directories
        else:
            rel_path = str(rel_path)
        paths.add(rel_path)

    filtered_paths: set[str] = {
        path for path in paths 
        if not any(ignore in path for ignore in ignores)
    }
    return filtered_paths

def hash_file(filepath):
    """ Returns the SHA-256 hash of a file's content. """
    hasher = hashlib.sha256()
    try:
        with open(filepath, 'rb') as f:
            while chunk := f.read(8192):
                hasher.update(chunk)
        return hasher.hexdigest()
    except Exception as e:
        print(f"Error hashing {filepath}: {e}")
        return None

def compare_dirs(dir1, dir2):
    dir1 = Path(dir1).resolve()
    dir2 = Path(dir2).resolve()

    if not dir1.is_dir() or not dir2.is_dir():
        print("Both arguments must be valid directories.")
        sys.exit(1)

    dir1_files: set[str] = get_relative_paths(dir1)
    dir2_files: set[str] = get_relative_paths(dir2)

    # sorted converts set[str] to list[str]
    only_in_dir1: list[str] = sorted(map(str, dir1_files - dir2_files))
    only_in_dir2: list[str] = sorted(map(str, dir2_files - dir1_files))
    common_files: list[str] = sorted(map(str, dir1_files & dir2_files))

    newer_in_dir1 = []
    newer_in_dir2 = []

    for item in common_files:
        file1 = dir1 / item
        file2 = dir2 / item
        if file1.is_file() and file2.is_file():
            hash1 = hash_file(file1)
            hash2 = hash_file(file2)

            if hash1 and hash2 and hash1 != hash2:  # Show only files with different content
                if file1.stat().st_mtime > file2.stat().st_mtime:
                    newer_in_dir1.append(item)
                elif file2.stat().st_mtime > file1.stat().st_mtime:
                    newer_in_dir2.append(item)

    # If no differences, show they are the same
    if not only_in_dir1 and not only_in_dir2 and not newer_in_dir1 and not newer_in_dir2:
        print(f"{dir1.name}/ and {dir2.name}/ are the same")
        return

    if only_in_dir1:
        print(f"\n\nONLY IN {dir1.name}/ :")
        for item in only_in_dir1:
            print(f"    {item}")

    if only_in_dir2:
        print(f"\n\nONLY IN {dir2.name}/ :")
        for item in only_in_dir2:
            print(f"    {item}")

    if newer_in_dir1:
        print(f"\n\nCOMMON FILES, {dir1.name}/ NEWER:")
        for item in newer_in_dir1:
            print(f"    {item}")

    if newer_in_dir2:
        print(f"\n\nCOMMON FILES, {dir2.name}/ NEWER:")
        for item in newer_in_dir2:
            print(f"    {item}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <dir1> <dir2>")
        sys.exit(1)

    compare_dirs(sys.argv[1], sys.argv[2])
