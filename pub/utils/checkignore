#!/usr/bin/env python3

r"""

"""

import sys
import hashlib
from pathlib import Path


ignores: list[str] = [ 'build/', '.build/', 'debug/', '.dist/', '.git/', '__pycache__/', '/target', 'venv/'  ]


def get_ignored_paths(root: Path) -> set[str]:
    """ 
    DEPENDS: ignores
    Returns a set of all relative paths inside a given directory. 
    """
    paths: set[str] = set()
    for path in Path(root).rglob('*'):
        rel_path = path.relative_to(root)
        if path.is_dir():
            rel_path: str = str(rel_path) + '/'  # Append trailing slash for directories
        else:
            rel_path: str = str(rel_path)
        paths.add(rel_path)

    filtered_paths: set[str] = {
        path for path in paths if any(ig in path for ig in ignores)
    }
    return filtered_paths



def print_ignores(target_dir: str) -> list[str]:
    """
    DEPENDS: get_ignored_paths
    
    """
    target_path: Path = Path(target_dir).resolve()

    if not target_path.is_dir():
        print("The target directory must be a valid directory.")
        sys.exit(1)

    ignored_str_paths: set[str] = get_ignored_paths(target_path)

    if not ignored_str_paths:
        print(f"No ignored files found. Program exit.")
        return

    sorted_ignores: list[str] = sorted(ignored_str_paths)
    
    for item in sorted_ignores:
        print(f"    {item}")


def main() -> None:
    """
    DEPENDS: print_ignores
    """
    if len(sys.argv) != 2:
        print(f"Usage: {sys.argv[0]} <target_dir>")
        sys.exit(1)

    print_ignores(sys.argv[1])


if __name__ == "__main__":
    main()